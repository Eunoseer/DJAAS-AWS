{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Dad jokes as a service",
    "Parameters": {
        "pHashKeyElementName": {
            "Description": "HashType PrimaryKey Name",
            "Type": "String",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "Default": "Id",
            "MinLength": "1",
            "MaxLength": "2048",
            "ConstraintDescription": "must contain only alphanumeric characters"
        },
        "pHashKeyElementType": {
            "Description": "HashType PrimaryKey Type",
            "Type": "String",
            "Default": "S",
            "AllowedPattern": "[S|N]",
            "MinLength": "1",
            "MaxLength": "1",
            "ConstraintDescription": "must be either S or N"
        },
        "pJokeElementName": {
            "Description": "Name",
            "Type": "String",
            "Default": "JokeText",
            "MaxLength": "2048"
        },
        "pJokeElementType": {
            "Description": "Type",
            "Type": "String",
            "Default": "S"
        },
        "pReadCapacityUnits": {
            "Description": "Provisioned read throughput",
            "Type": "Number",
            "Default": "1",
            "MinValue": "1",
            "MaxValue": "5",
            "ConstraintDescription": "must be between 1 and 5"
        },
        "pWriteCapacityUnits": {
            "Description": "Provisioned write throughput",
            "Type": "Number",
            "Default": "1",
            "MinValue": "1",
            "MaxValue": "5",
            "ConstraintDescription": "must be between 1 and 5"
        }
    },
    "Resources": {
        "rDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": "Dad_Jokes",
                "AttributeDefinitions": [
                    {
                        "AttributeName": {
                            "Ref": "pHashKeyElementName"
                        },
                        "AttributeType": {
                            "Ref": "pHashKeyElementType"
                        }
                    },
                    {
                        "AttributeName": {
                            "Ref": "pJokeElementName"
                        },
                        "AttributeType": {
                            "Ref": "pJokeElementType"
                        }
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": {
                            "Ref": "pHashKeyElementName"
                        },
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": {
                            "Ref": "pJokeElementName"
                        },
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": {
                        "Ref": "pReadCapacityUnits"
                    },
                    "WriteCapacityUnits": {
                        "Ref": "pWriteCapacityUnits"
                    }
                }
            }
        },
        "rLambdaGetRandom": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "rLambdaExecutionRole",
            "Properties": {
                "FunctionName": "DadJokesGetRandom",
                "Architectures": [
                    "arm64"
                ],
                "Description": "Retrieves a random dad joke from DynamoDB. Returns a JSON object.",
                "Role": {
                    "Fn::GetAtt": [
                        "rLambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": "./lambda/random.js"
                }
            }
        },
        "rLambdaExecutionPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "LambdaExecutionPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "Logs:CreateLogGroup"
                            ],
                            "Resource": [
                                "arn:aws:logs:ap-southeast-2:723104728616:*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:ap-southeast-2:723104728616:log-group:/aws/lambda/DadJokesGetRandom:*"
                            ]
                        }
                    ]
                }
            }
        },
        "rLambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "DependsOn": [
                "rLambdaExecutionPolicy"
            ],
            "Properties": {
                "RoleName": "LambdaExecutionRole",
                "Description": "The role used by Lambda to log to cloudwatch.",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::GetAtt": [
                            "rLambdaExecutionPolicy",
                            "Arn"
                        ]
                    }
                ]
            }
        },
        "rApiGatewayPolicy": {
            "Type": "AWS::IAM::Policy",
            "DependsOn": [
                "rLambdaGetRandom"
            ],
            "Properties": {
                "PolicyName": "ApiGatewayLambdaCallPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeFunction",
                                "lambda:InvokeAsync",
                                "lambda:GetFunction"
                            ]
                        }
                    ],
                    "Resource": [
                        {
                            "Fn::GetAtt": [
                                "rLambdaGetRandom",
                                "Arn"
                            ]
                        }
                    ]
                }
            }
        },
        "rApiGatewayRole": {
            "Type": "AWS::IAM::Role",
            "DependsOn": [
                "rApiGatewayPolicy"
            ],
            "Properties": {
                "RoleName": "ApiGatewayLambdaCallRole",
                "Description": "The role used by API Gateway to handle calls to Lambda functions",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::GetAtt": [
                            "rApiGatewayPolicy",
                            "Arn"
                        ]
                    }
                ]
            }
        },
        "rApiGateway": {
            "Type": "AWS::ApiGateway::RestApi",
            "DependsOn": [
                "rApiGatewayRole"
            ],
            "Properties": {
                "Name": "DadJokesRestAPI",
                "Description": "The api gateway that handles calls for the Dad Jokes REST API.",
                "Body": {
                    "OpenAPI specification": "/api/schema.yaml"
                }
            }
        }
    },
    "Outputs": {
        "ODynamoDBTable": {
            "Value": {
                "Ref": "rDynamoDBTable"
            },
            "Description": "Newly created Dad Jokes DynamoDB table."
        }
    }
}